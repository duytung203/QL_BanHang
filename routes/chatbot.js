const express = require('express');
const router = express.Router();
const axios = require('axios');
const db = require('../db');

const suggestionKeywords = ['m√°t', 'tr√†', 'ƒë√°', 'chanh', 's·ªØa', 'ng·ªçt', 't∆∞∆°i'];

router.post('/', async (req, res) => {
  const { message } = req.body;

  if (!message || message.trim() === '') {
    return res.status(400).json({ error: 'Vui l√≤ng nh·∫≠p n·ªôi dung.' });
  }

  try {
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;

    // Prompt ti·∫øng Vi·ªát
    const prompt = `
B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán c·ªßa c·ª≠a h√†ng ThanhTraTea. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, vui v·∫ª, d·ªÖ hi·ªÉu.

M·ªôt s·ªë quy t·∫Øc:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ƒë·ªì u·ªëng m√°t, h√£y ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c√≥ ƒë√° ho·∫∑c tr√†.
- N·∫øu ng∆∞·ªùi d√πng ch√†o, h√£y ƒë√°p l·∫°i m·ªôt c√°ch d·ªÖ th∆∞∆°ng.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi khuy·∫øn m√£i, cung c·∫•p th√¥ng tin ng·∫Øn g·ªçn.
- N·∫øu ng∆∞·ªùi d√πng nh·∫ßm l·∫´n chatbot v·ªõi ng∆∞·ªùi th·∫≠t, h√£y x√°c nh·∫≠n b·∫°n l√† AI nh∆∞ng r·∫•t th√¢n thi·ªán.
- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ thanh to√°n, h∆∞·ªõng d·∫´n r√µ r√†ng.

Ng∆∞·ªùi d√πng h·ªèi: ${message}
`;
    // G·ªçi Gemini
    const response = await axios.post(GEMINI_API_URL, {
      contents: [{ parts: [{ text: prompt }] }]
    });

    const reply = response.data?.candidates?.[0]?.content?.parts?.[0]?.text || 'ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.';

    // Ki·ªÉm tra t·ª´ kh√≥a v√† t√¨m s·∫£n ph·∫©m n·∫øu c√≥ li√™n quan
    const matchedKeyword = suggestionKeywords.find(kw => message.toLowerCase().includes(kw));
    let suggestions = [];

    if (matchedKeyword) {
      const sql = `
        SELECT p.*, pr.discount_percent,
               ROUND(p.price * (1 - IFNULL(pr.discount_percent, 0) / 100)) AS discounted_price
        FROM products p
        LEFT JOIN promotions pr 
          ON p.id = pr.product_id 
          AND pr.start_date <= CURDATE() 
          AND pr.end_date >= CURDATE()
        WHERE p.name LIKE ? OR p.mota LIKE ?
        LIMIT 3
      `;

      const keywordLike = `%${matchedKeyword}%`;
      const [rows] = await db.promise().query(sql, [keywordLike, keywordLike]);
      suggestions = rows;
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.json({ reply, suggestions });

  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω chatbot:', error.message);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß khi g·ªçi chatbot.' });
  }
});
module.exports = router;
